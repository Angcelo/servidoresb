// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package servidoresb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClienteServiceClient is the client API for ClienteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClienteServiceClient interface {
	CrearPedido(ctx context.Context, in *ClienteRequest, opts ...grpc.CallOption) (*GeneralResponse, error)
	GetPedidos(ctx context.Context, in *Vacio, opts ...grpc.CallOption) (*ListaPedidosReponse, error)
	GetEstadoRestaurant(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GeneralResponse, error)
	GetEstadoReparto(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GeneralResponse, error)
	GetPedidosRest(ctx context.Context, in *Vacio, opts ...grpc.CallOption) (*ListaPedidosReponse, error)
	EnviarEncargo(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GeneralResponse, error)
	GetPedidosReparto(ctx context.Context, in *Vacio, opts ...grpc.CallOption) (*ListaPedidosReponse, error)
	TerminarEncargo(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GeneralResponse, error)
}

type clienteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClienteServiceClient(cc grpc.ClientConnInterface) ClienteServiceClient {
	return &clienteServiceClient{cc}
}

func (c *clienteServiceClient) CrearPedido(ctx context.Context, in *ClienteRequest, opts ...grpc.CallOption) (*GeneralResponse, error) {
	out := new(GeneralResponse)
	err := c.cc.Invoke(ctx, "/grpc.ClienteService/CrearPedido", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clienteServiceClient) GetPedidos(ctx context.Context, in *Vacio, opts ...grpc.CallOption) (*ListaPedidosReponse, error) {
	out := new(ListaPedidosReponse)
	err := c.cc.Invoke(ctx, "/grpc.ClienteService/GetPedidos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clienteServiceClient) GetEstadoRestaurant(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GeneralResponse, error) {
	out := new(GeneralResponse)
	err := c.cc.Invoke(ctx, "/grpc.ClienteService/GetEstadoRestaurant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clienteServiceClient) GetEstadoReparto(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GeneralResponse, error) {
	out := new(GeneralResponse)
	err := c.cc.Invoke(ctx, "/grpc.ClienteService/GetEstadoReparto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clienteServiceClient) GetPedidosRest(ctx context.Context, in *Vacio, opts ...grpc.CallOption) (*ListaPedidosReponse, error) {
	out := new(ListaPedidosReponse)
	err := c.cc.Invoke(ctx, "/grpc.ClienteService/GetPedidosRest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clienteServiceClient) EnviarEncargo(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GeneralResponse, error) {
	out := new(GeneralResponse)
	err := c.cc.Invoke(ctx, "/grpc.ClienteService/EnviarEncargo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clienteServiceClient) GetPedidosReparto(ctx context.Context, in *Vacio, opts ...grpc.CallOption) (*ListaPedidosReponse, error) {
	out := new(ListaPedidosReponse)
	err := c.cc.Invoke(ctx, "/grpc.ClienteService/GetPedidosReparto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clienteServiceClient) TerminarEncargo(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GeneralResponse, error) {
	out := new(GeneralResponse)
	err := c.cc.Invoke(ctx, "/grpc.ClienteService/TerminarEncargo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClienteServiceServer is the server API for ClienteService service.
// All implementations must embed UnimplementedClienteServiceServer
// for forward compatibility
type ClienteServiceServer interface {
	CrearPedido(context.Context, *ClienteRequest) (*GeneralResponse, error)
	GetPedidos(context.Context, *Vacio) (*ListaPedidosReponse, error)
	GetEstadoRestaurant(context.Context, *IdRequest) (*GeneralResponse, error)
	GetEstadoReparto(context.Context, *IdRequest) (*GeneralResponse, error)
	GetPedidosRest(context.Context, *Vacio) (*ListaPedidosReponse, error)
	EnviarEncargo(context.Context, *IdRequest) (*GeneralResponse, error)
	GetPedidosReparto(context.Context, *Vacio) (*ListaPedidosReponse, error)
	TerminarEncargo(context.Context, *IdRequest) (*GeneralResponse, error)
	mustEmbedUnimplementedClienteServiceServer()
}

// UnimplementedClienteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClienteServiceServer struct {
}

func (UnimplementedClienteServiceServer) CrearPedido(context.Context, *ClienteRequest) (*GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrearPedido not implemented")
}
func (UnimplementedClienteServiceServer) GetPedidos(context.Context, *Vacio) (*ListaPedidosReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPedidos not implemented")
}
func (UnimplementedClienteServiceServer) GetEstadoRestaurant(context.Context, *IdRequest) (*GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEstadoRestaurant not implemented")
}
func (UnimplementedClienteServiceServer) GetEstadoReparto(context.Context, *IdRequest) (*GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEstadoReparto not implemented")
}
func (UnimplementedClienteServiceServer) GetPedidosRest(context.Context, *Vacio) (*ListaPedidosReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPedidosRest not implemented")
}
func (UnimplementedClienteServiceServer) EnviarEncargo(context.Context, *IdRequest) (*GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnviarEncargo not implemented")
}
func (UnimplementedClienteServiceServer) GetPedidosReparto(context.Context, *Vacio) (*ListaPedidosReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPedidosReparto not implemented")
}
func (UnimplementedClienteServiceServer) TerminarEncargo(context.Context, *IdRequest) (*GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminarEncargo not implemented")
}
func (UnimplementedClienteServiceServer) mustEmbedUnimplementedClienteServiceServer() {}

// UnsafeClienteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClienteServiceServer will
// result in compilation errors.
type UnsafeClienteServiceServer interface {
	mustEmbedUnimplementedClienteServiceServer()
}

func RegisterClienteServiceServer(s grpc.ServiceRegistrar, srv ClienteServiceServer) {
	s.RegisterService(&ClienteService_ServiceDesc, srv)
}

func _ClienteService_CrearPedido_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClienteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClienteServiceServer).CrearPedido(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ClienteService/CrearPedido",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClienteServiceServer).CrearPedido(ctx, req.(*ClienteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClienteService_GetPedidos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vacio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClienteServiceServer).GetPedidos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ClienteService/GetPedidos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClienteServiceServer).GetPedidos(ctx, req.(*Vacio))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClienteService_GetEstadoRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClienteServiceServer).GetEstadoRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ClienteService/GetEstadoRestaurant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClienteServiceServer).GetEstadoRestaurant(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClienteService_GetEstadoReparto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClienteServiceServer).GetEstadoReparto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ClienteService/GetEstadoReparto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClienteServiceServer).GetEstadoReparto(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClienteService_GetPedidosRest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vacio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClienteServiceServer).GetPedidosRest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ClienteService/GetPedidosRest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClienteServiceServer).GetPedidosRest(ctx, req.(*Vacio))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClienteService_EnviarEncargo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClienteServiceServer).EnviarEncargo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ClienteService/EnviarEncargo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClienteServiceServer).EnviarEncargo(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClienteService_GetPedidosReparto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vacio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClienteServiceServer).GetPedidosReparto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ClienteService/GetPedidosReparto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClienteServiceServer).GetPedidosReparto(ctx, req.(*Vacio))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClienteService_TerminarEncargo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClienteServiceServer).TerminarEncargo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ClienteService/TerminarEncargo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClienteServiceServer).TerminarEncargo(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClienteService_ServiceDesc is the grpc.ServiceDesc for ClienteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClienteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ClienteService",
	HandlerType: (*ClienteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CrearPedido",
			Handler:    _ClienteService_CrearPedido_Handler,
		},
		{
			MethodName: "GetPedidos",
			Handler:    _ClienteService_GetPedidos_Handler,
		},
		{
			MethodName: "GetEstadoRestaurant",
			Handler:    _ClienteService_GetEstadoRestaurant_Handler,
		},
		{
			MethodName: "GetEstadoReparto",
			Handler:    _ClienteService_GetEstadoReparto_Handler,
		},
		{
			MethodName: "GetPedidosRest",
			Handler:    _ClienteService_GetPedidosRest_Handler,
		},
		{
			MethodName: "EnviarEncargo",
			Handler:    _ClienteService_EnviarEncargo_Handler,
		},
		{
			MethodName: "GetPedidosReparto",
			Handler:    _ClienteService_GetPedidosReparto_Handler,
		},
		{
			MethodName: "TerminarEncargo",
			Handler:    _ClienteService_TerminarEncargo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "servidor.proto",
}
